/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.sviperll.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author vir
 */
class SimpleSQLConnection implements SQLConnection {
    static SQLConnection createInstance(Connection connection) {
        return new SimpleSQLConnection(connection);
    }

    private final AutocommitState autoCommitState = new AutocommitState();
    private final TransactionState transactionState = new TransactionState();
    private final Connection connection;
    private SQLTransactionManager state;

    private SimpleSQLConnection(Connection connection) {
        this.connection = connection;
        this.state = autoCommitState;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatementWithAutogeneratedKeys(String sql) throws SQLException {
        return connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
    }

    @Override
    public PreparedStatement prepareStatementWithoutAutogeneratedKeys(String sql) throws SQLException {
        return connection.prepareStatement(sql, Statement.NO_GENERATED_KEYS);
    }

    @Override
    public void close() throws SQLException {
        state.rollbackTransactionIfNotCommited();
        connection.close();
    }

    @Override
    public void beginTransaction(SQLTransactionIsolationLevel level) throws SQLException {
        state.beginTransaction(level);
    }

    @Override
    public void beginTransaction() throws SQLException {
        state.beginTransaction();
    }

    @Override
    public void commitTransaction() throws SQLException {
        state.commitTransaction();
    }

    @Override
    public void rollbackTransaction() throws SQLException {
        state.rollbackTransaction();
    }

    @Override
    public void rollbackTransactionIfNotCommited() throws SQLException {
        state.rollbackTransactionIfNotCommited();
    }

    private class AutocommitState implements SQLTransactionManager {
        @Override
        public void beginTransaction() throws SQLException {
            connection.setAutoCommit(false);
            state = transactionState;
        }

        @Override
        public void beginTransaction(SQLTransactionIsolationLevel level) throws SQLException {
            connection.setAutoCommit(false);
            setTransactionIsolationLevel(level);
            state = transactionState;
        }

        private void setTransactionIsolationLevel(SQLTransactionIsolationLevel level) throws SQLException,
                                                                                             IllegalArgumentException {
            switch (level) {
                case NONE:
                    connection.setTransactionIsolation(Connection.TRANSACTION_NONE);
                    break;
                case READ_COMMITTED:
                    connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
                    break;
                case READ_UNCOMMITTED:
                    connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
                    break;
                case REPEATABLE_READ:
                    connection.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
                    break;
                case SERIALIZABLE:
                    connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported transaction isolation level: " + level);
            }
        }

        @Override
        public void commitTransaction() throws SQLException {
            throw new UnsupportedOperationException("You should begin transaction first.");
        }

        @Override
        public void rollbackTransaction() throws SQLException {
            throw new UnsupportedOperationException("You should begin transaction first.");
        }

        @Override
        public void rollbackTransactionIfNotCommited() throws SQLException {
        }
    }

    private class TransactionState implements SQLTransactionManager {
        @Override
        public void beginTransaction() throws SQLException {
            throw new UnsupportedOperationException("Transaction already started.");
        }

        @Override
        public void beginTransaction(SQLTransactionIsolationLevel level) throws SQLException {
            throw new UnsupportedOperationException("Transaction already started.");
        }

        @Override
        public void commitTransaction() throws SQLException {
            connection.commit();
            state = autoCommitState;
            connection.setAutoCommit(true);
        }

        @Override
        public void rollbackTransaction() throws SQLException {
            connection.rollback();
            state = autoCommitState;
            connection.setAutoCommit(true);
        }

        @Override
        public void rollbackTransactionIfNotCommited() throws SQLException {
            rollbackTransaction();
        }
    }
}

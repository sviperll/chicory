/*
 * Copyright (c) 2014, Victor Nazarov <asviraspossible@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Victor Nazarov nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.sviperll.repository;

import com.github.sviperll.OptionalVisitor;
import java.sql.SQLException;
import java.util.List;

/**
 *
 * @author vir
 */
public class RepositoryFactory {
    private final RepositorySupport support;
    public RepositoryFactory(RepositorySupport support) {
        this.support = support;
    }

    public RepositorySupport support() {
        return support;
    }

    public <K, V> AutogeneratedKeyIndexedRepository<K, V> autogeneratedKeyIndexed(final AutogeneratedKeyIndexedRepositoryConfiguration<K, V> configuration) {
        return new AutogeneratedKeyIndexedRepository<K, V>() {
            @Override
            public K putNewEntry(V attributes) throws SQLException {
                return support.putNewEntry(configuration, attributes);
            }

            @Override
            public boolean putIfExists(K key, Changes<V> changes)
                    throws SQLException {
                return support.putIfExists(configuration, key, changes);
            }

            @Override
            public boolean remove(K key) throws SQLException {
                return support.remove(configuration, key);
            }

            @Override
            public <R, E extends Exception> R get(K key,
                                                  OptionalVisitor<V, R, E> optionalVisitor)
                    throws E, SQLException {
                return support.get(configuration, key, optionalVisitor);
            }
        };
    }

    public <K, V> AutogeneratedKeyIndexedRepository<K, V> autogeneratedKeyIndexed(final String tableName, final StorableTypeDefinition<K> key, final StorableTypeDefinition<K> autogeneratedKey, final StorableTypeDefinition<V> value) {
        return autogeneratedKeyIndexed(RepositoryConfigurations.autogeneratedKeyIndexed(tableName, key, autogeneratedKey, value));
    }

    public <K, V> IndexedRepository<K, V> indexed(final IndexedRepositoryConfiguration<K, V> configuration) {
        return new IndexedRepository<K, V>() {
            @Override
            public <R, E extends Exception> R get(K key,
                                                  OptionalVisitor<V, R, E> optionalVisitor) throws E, SQLException {
                return support.get(configuration, key, optionalVisitor);
            }

            @Override
            public boolean remove(K key) throws SQLException {
                return support.remove(configuration, key);
            }

            @Override
            public boolean putIfExists(K key, Changes<V> attributes) throws SQLException {
                return support.putIfExists(configuration, key, attributes);
            }

            @Override
            public void putNewEntry(K key, V attributes) throws SQLException {
                support.putNewEntry(configuration, key, attributes);
            }

            @Override
            public boolean put(K key, V attributes) throws SQLException {
                return support.put(configuration, key, attributes);
            }
        };
    }

    public <K, V> IndexedRepository<K, V> indexed(final String tableName, final StorableTypeDefinition<K> key, final StorableTypeDefinition<V> value) {
        return indexed(RepositoryConfigurations.indexed(tableName, key, value));
    }

    public <E, O> ReadableRepository<E, O> readable(final ReadableRepositoryConfiguration<E, O> configuration) {
        return new ReadableRepository<E, O>() {

            @Override
            public List<E> entryList(SlicingQuery<O> slicing) throws SQLException {
                return support.entryList(configuration, slicing);
            }
        };
    }

    public <E, O> ReadableRepository<E, O> readable(final String tableName, final StorableTypeDefinition<E> entry, final StorableTypeDefinition<O> ordering) {
        return readable(RepositoryConfigurations.readable(tableName, entry, ordering));
    }

    public <K, E, O> ReadableRepositoryDirectory<K, E, O> readableDirectory(final ReadableRepositoryDirectoryConfiguration<K, E, O> configuration) {
        return new ReadableRepositoryDirectory<K, E, O>() {
            @Override
            public ReadableRepository<E, O> get(final K key) throws SQLException {
                return new ReadableRepository<E, O>() {

                    @Override
                    public List<E> entryList(SlicingQuery<O> slicing)
                            throws SQLException {
                        return support.entryList(configuration, key, slicing);
                    }
                };
            }
        };
    }

    public <K, E, O> ReadableRepositoryDirectory<K, E, O> readableDirectory(final String tableName, final StorableTypeDefinition<E> entry, final StorableTypeDefinition<K> key, final StorableTypeDefinition<O> ordering) {
        return readableDirectory(RepositoryConfigurations.readableDirectory(tableName, entry, key, ordering));
    }

}

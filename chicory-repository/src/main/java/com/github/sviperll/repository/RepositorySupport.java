/*
 * Copyright (c) 2014, Victor Nazarov <asviraspossible@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Victor Nazarov nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.sviperll.repository;

import com.github.sviperll.OptionalVisitor;
import com.github.sviperll.OptionalVisitors;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

public class RepositorySupport implements RepositorySupportDefinition, SQLTransactionManager {
    public static RepositorySupport of(RepositorySupportDefinition definition) {
        if (definition instanceof RepositorySupport)
            return (RepositorySupport)definition;
        else
            return new RepositorySupport(definition);
    }

    private final RepositorySupportDefinition definition;
    private final SQLConnection connection;

    private RepositorySupport(RepositorySupportDefinition definition) {
        this.definition = definition;
        this.connection = definition.connection();
    }

    @Override
    public <K, V> K putNewEntry(AutogeneratedKeyIndexedRepositoryConfiguration<K, V> configuration, V attributes) throws SQLException {
        return definition.putNewEntry(configuration, attributes);
    }

    @Override
    public <K, V, R, E extends Exception> R get(IndexedRepositoryConfiguration<K, V> configuration, K key, OptionalVisitor<V, R, E> optionalVisitor)
            throws E, SQLException {
        return definition.get(configuration, key, optionalVisitor);
    }

    public <V, O> List<V> entryList(ReadableRepositoryConfiguration<V, O> configuration, SlicingQuery<O> slicing) throws SQLException {
        return entryList(new VoidReadableRepositoryDirectoryConfiguration<>(configuration), null, slicing);
    }

    @Override
    public <K, V, O> List<V> entryList(ReadableRepositoryDirectoryConfiguration<K, V, O> configuration, K key, SlicingQuery<O> slicing) throws SQLException {
        return definition.entryList(configuration, key, slicing);
    }

    @Override
    public <K> boolean remove(RepositoryIndex<K> configuration, K key) throws SQLException {
        return definition.remove(configuration, key);
    }

    @Override
    public <K, V> boolean putIfExists(IndexedRepositoryConfiguration<K, V> configuration, K key, Changes<V> attributes) throws SQLException {
        return definition.putIfExists(configuration, key, attributes);
    }

    @Override
    public <K, V> void putNewEntry(IndexedRepositoryConfiguration<K, V> configuration, K key, V attributes) throws SQLException {
        definition.putNewEntry(configuration, key, attributes);
    }

    public <K, V> boolean put(IndexedRepositoryConfiguration<K, V> configuration, K key, V attributes) throws SQLException {
        V oldAttributes = get(configuration, key, OptionalVisitors.<V>returnNull());
        if (oldAttributes != null)
            return putIfExists(configuration, key, Changes.fromTo(oldAttributes, attributes));
        else {
            putNewEntry(configuration, key, attributes);
            return true;
        }
    }

    @Override
    public void beginTransaction() throws SQLException {
        connection.beginTransaction();
    }

    @Override
    public void beginTransaction(SQLTransactionIsolationLevel level) throws SQLException {
        connection.beginTransaction(level);
    }

    @Override
    public void commitTransaction() throws SQLException {
        connection.commitTransaction();
    }

    @Override
    public void rollbackTransaction() throws SQLException {
        connection.rollbackTransaction();
    }

    @Override
    public void rollbackTransactionIfNotCommited() throws SQLException {
        connection.rollbackTransactionIfNotCommited();
    }

    @Override
    public SQLConnection connection() {
        return connection;
    }

    public void close() throws SQLException {
        connection.close();
    }

    private static class VoidReadableRepositoryDirectoryConfiguration<V, O> implements ReadableRepositoryDirectoryConfiguration<Void, V, O> {
        private static final StorableTypeDefinition<Void> VOID_CLASS = new VoidStorableClass();
        final ReadableRepositoryConfiguration<V, O> reader;
        public VoidReadableRepositoryDirectoryConfiguration(ReadableRepositoryConfiguration<V, O> reader) {
            this.reader = reader;
        }

        @Override
        public StorableTypeDefinition<V> getEntryDefinition() {
            return reader.getEntryDefinition();
        }

        @Override
        public StorableTypeDefinition<O> getOrderingDefinition() {
            return reader.getOrderingDefinition();
        }

        @Override
        public String getTableName() {
            return reader.getTableName();
        }

        @Override
        public StorableTypeDefinition<Void> getKeyDefinition() {
            return VOID_CLASS;
        }
    }

    private static class VoidStorableClass implements StorableTypeDefinition<Void> {
        @Override
        public List<AtomicStorableComponent<Void, ?>> getAtomicComponents() {
            return Collections.emptyList();
        }

        @Override
        public Void createInstance(ResultSet resultSet) {
            return null;
        }
    }
}

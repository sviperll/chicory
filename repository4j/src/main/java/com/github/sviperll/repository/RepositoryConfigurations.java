/*
 * Copyright (c) 2014, Victor Nazarov <asviraspossible@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Victor Nazarov nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.sviperll.repository;

/**
 *
 * @author vir
 */
public class RepositoryConfigurations {
    public static <K, V> AutogeneratedKeyIndexedRepositoryConfiguration<K, V> autogeneratedKeyIndexed(final String tableName, final StorableTypeDefinition<K> key, final StorableTypeDefinition<K> autogeneratedKey, final StorableTypeDefinition<V> value) {
        return new AutogeneratedKeyIndexedRepositoryConfiguration<K, V>() {
            @Override
            public StorableTypeDefinition<K> getAutogeneratedKeyDefinition() {
                return autogeneratedKey;
            }

            @Override
            public StorableTypeDefinition<V> getValueDefinition() {
                return value;
            }

            @Override
            public String getTableName() {
                return tableName;
            }

            @Override
            public StorableTypeDefinition<K> getKeyDefinition() {
                return key;
            }
        };
    }

    public static <K, V> IndexedRepositoryConfiguration<K, V> indexed(final String tableName, final StorableTypeDefinition<K> key, final StorableTypeDefinition<V> value) {
        return new IndexedRepositoryConfiguration<K, V>() {
            @Override
            public StorableTypeDefinition<K> getKeyDefinition() {
                return key;
            }

            @Override
            public StorableTypeDefinition<V> getValueDefinition() {
                return value;
            }

            @Override
            public String getTableName() {
                return tableName;
            }
        };
    }

    public static <E, O> ReadableRepositoryConfiguration<E, O> readable(final String tableName, final StorableTypeDefinition<E> entry, final StorableTypeDefinition<O> ordering) {
        return new ReadableRepositoryConfiguration<E, O>() {

            @Override
            public StorableTypeDefinition<E> getEntryDefinition() {
                return entry;
            }

            @Override
            public StorableTypeDefinition<O> getOrderingDefinition() {
                return ordering;
            }

            @Override
            public String getTableName() {
                return tableName;
            }
        };
    }

    public static <K, E, O> ReadableRepositoryDirectoryConfiguration<K, E, O> readableDirectory(final String tableName, final StorableTypeDefinition<E> entry, final StorableTypeDefinition<K> key, final StorableTypeDefinition<O> ordering) {
        return new ReadableRepositoryDirectoryConfiguration<K, E, O>() {

            @Override
            public StorableTypeDefinition<E> getEntryDefinition() {
                return entry;
            }

            @Override
            public StorableTypeDefinition<O> getOrderingDefinition() {
                return ordering;
            }

            @Override
            public String getTableName() {
                return tableName;
            }

            @Override
            public StorableTypeDefinition<K> getKeyDefinition() {
                return key;
            }
        };
    }

    private RepositoryConfigurations() {
    }
}
